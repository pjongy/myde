Help


Installed env
  - pyenv (python)
  - jabba (jdk)
  - nvm (node)
  - go
  - ptpython (interactive python console)
    - $ ptpython
  - rust
  - dart


Tmux
  HotKey
    <Ctrl> + b

  HotKey(e.g remote) in tmux session (Send hotkey twice)
    <HotKey> -> <HotKey>

  Create new window
    <HotKey> -> c

  Change window previous
    <HotKey> -> p

  Change window next
    <HotKey> -> n

  Find window/pane
    <HotKey> -> f

  Split screen (vertical)
    <HotKey> -> %

  Split screen (horizontal)
    <HotKey> -> "

  Command
    <HotKey> -> :

    Resize pane
      resize-pane -{D/U/L/R} {size}

      e.g) Resize to down 10
           resize-pane -D 10

  Edit mode
    <HotKye> -> [

      Search text (vim shorcut)
        - forward: /
        - backward: ?
        - next: n
        - previos: N

      Cursor drag
        <Ctrl> + <Space>
        v

      Copy selected
        y

      Copy and exit edit mode
        <Ctrl> + w

  Paste on tmux
    <HotKey> -> ]

  Detach
    <HotKey> ->  d

  Close panel
    <Ctrl> -> d


W3M
  Open url
    $ w3m {URL}

    Open new tab
      <Shift> + t

    Move tab
      <Shift> + { / }

    Refresh
      <Shift> + r

    Change URL
      <Shift> + u

    Close
      <Shift> + q


Vim (SpaceVim)
  HotKey
    <Space>

  <Leader>
    ,

  Move cursor
    Previous cursor
      <Ctrl> + o

    Next cursor
      <Ctrl> + i

  Go to definition (Using tag)
    <Ctrl> + ]

  vim-lsc (autocomplete via key typing)
    Go to definition (:LSClientGoToDefinition)
      <Leader> + d

    List references (:LSClientFindReferenses)
      <Leader> + r

    Autocomplete manually (wired omnifunc to lsc#complete#complete)
      <Ctrl> + x -> <Ctrl> + o

  Change colorScheme
    :colorscheme default

    To default as permanantly
      $ echo "colorscheme default" >> ~/.vim_runtime/my_configs.vim

    Alternatives for default
      peaksea / PaperColor ...

  NerdTree
    :NERDTree

    Move cursor between NerdTree
      <Ctrl> + w -> <Arrow Left/Right>

    On NERDTree
      Help
        ?

      Open with vertical new tab
        s

      Open with horizontal new tab
        i

      Open in opened tab
        o

      Modify nodes
        m

        Add new file
          a

      Refresh nodes
        R

      Set current cursor as root
        C

   Resize Panel
     {Number} -> Ctrl + w -> { - / + }


  FZF
    Find files on current path
      :Files <Path/None>

    List lines on current file
      :Lines

    List buffers (prev/next/... files)
      :Buffers

    Find text matches on current path(ripgrep)
      :Rg <Pattern>

  Change working directory
    :cd {PATH}

  Set visual selection
    v

    Change visual selected block
      <Ctrl> + <r>

    Find text visual selected block
      <Ctrl> + <f>

  Vim-go
    Format
      :GoFmt

  Jedi-vim (python)
    Goto definition
      <leader> -> d

  Hexa
    Enter hex edit mode
      :%!xxd

      With column
        :%!xxd -c 24

    Exit hex edit mode (before save)
      :%!xxd -r

      With column
        :%!xxd -r -c 24

kafkactl

    Edit context
        $ vi $HOME/.config/kafkactl/config.yaml

    Consume message
        $ kafkactl consume {TOPIC}

    Produce message
        $ kafkactl produce {TOPIC} --key={KEY} --value={VALUE}

    Reset consumer group offset
        $ kafkactl reset offset {GROUP} --topic {TOPIC} --offset {OFFSET}

cqlsh

    (Read DataStax license: https://www.datastax.com/legal/datastax-cqlsh-license-terms)
    And manually install with:
        1. $ wget -O $INSTALL_PATH/cqlsh-astra.tar.gz https://downloads.datastax.com/enterprise/cqlsh-astra.tar.gz
        2. $ tar -xzvf $INSTALL_PATH/cqlsh-astra.tar.gz -C $INSTALL_PATH
        3. $ sudo ln -sf $INSTALL_PATH/cqlsh-astra/bin/cqlsh /usr/local/bin/cqlsh

    Connect to cassandra
        $ cqlsh -u {USER} -p {PASSWORD} {HOST} {PORT}

natscli

    Add context and select as default context
        $ nats context add nats --server {HOST} --description {DESCRIPTION} --select

    Show context list
        $ nats context ls


httpie (curl alternative)

    Request(use https for using tls)
      $ http {url}

          Form request
            -f {METHOD} param=value

          Json request
            {METHOD} param=value

          With header
            X-Header:Value


jless (json viewer)

    Parse json
      $ jless {FILENAME}


zellij (tmux alternative)

    Start zellij (shotrcuts below)
      $ zellij

    List zellij
      $ zellij ls

    Attach zellij session
      $ zellij attach
